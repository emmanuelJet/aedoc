contract RemoteOracle = 
  // Interface to oracle
  entrypoint  get_oracle_address : () => oracle(string, string)
  entrypoint  process_response : (oracle(string, string), oracle_query(string, string)) => ()
  
contract SmartDataProviderClient =
  
  stateful entrypoint get_exchange_rate(oracle_interface : RemoteOracle, currency : string) : () =
    let answering_oracle : oracle(string, string) = oracle_interface.get_oracle_address()
    let query_oracle : oracle_query(string, string) = 
      Oracle.query(answering_oracle, currency, 10, RelativeTTL(50), RelativeTTL(50))
    process_response(oracle_interface, answering_oracle, query_oracle)
    read_response(answering_oracle, query_oracle)
    
  function process_response(remote : RemoteOracle, answering_oracle, query) : () = 
    remote.process_response(answering_oracle, query)
    
  function read_response(oracle: oracle(string, string), query : oracle_query(string, string)) : () =
    switch(Oracle.get_answer(oracle, query))
      Some(e) => e
      None => "No answer from oracle"