contract FungiblePausable =
  record state = {
    owner            : address, 
    total_supply      : int,
    map_balances         : map(address, int),
    map_allowed          : map((address,address), int),
    paused           : bool}

  public stateful function init() = {
    owner = Call.caller,
    total_supply = 0,
    map_balances = {},
    map_allowed = {},
    paused = false}

  public function paused() : bool =
    state.paused

  public function total_supply() : int =
    state.total_supply

  public function balance_of(who: address) : int =
    Map.lookup_default(who, state.map_balances, 0)

  public function allowance(owner: address, spender: address) : int =
    Map.lookup_default((owner, spender), state.map_allowed, 0)

  public stateful function transfer(to: address, value: int) =
    require(!state.paused, "Contract is paused")
    transfer'(Call.caller, to, value)

  public stateful function approve(spender: address, value: int) = 
    require(!state.paused, "Contract is paused")
    require(value > 0, "Value is sub zero")
    require(spender != #0, "Invalid spender address")

    put(state{map_allowed[(Call.caller,spender)] = value})

  private stateful function transfer'(from: address, to: address, value: int) =
    require(value > 0, "Value is sub zero")
    require((value =< balance_of(from)), "Not enough balance")
    require(to != #0, "Invalid address")

    put(state{
      map_balances[from] = state.map_balances[from] - value,
      map_balances[to] = state.map_balances[to] + value})

  public stateful function transfer_from(from: address, to: address, value: int) =
    require(!state.paused, "Contract is paused")
    require(state.map_allowed[(from, Call.caller)] >= value, "Value is bigger than allowed")

    put(state{map_allowed[(from,Call.caller)] = state.map_allowed[(from,Call.caller)] - value})
    transfer'(from, to, value)

  public stateful function increase_allowance(spender: address, added_value: int) =
    require(!state.paused, "Contract is paused")
    require(spender != #0, "Invalid address")
    put(state{map_allowed[(Call.caller, spender)] = state.map_allowed[(Call.caller,spender)] + added_value})

  public stateful function decrease_allowance(spender: address, subtracted_value: int) =
    require(!state.paused, "Contract is paused")
    require(spender != #0, "Invalid address")
    put(state{map_allowed[(Call.caller,spender)] = state.map_allowed[(Call.caller,spender)] - subtracted_value})

  public stateful function mint(account: address, value: int) =
    only_owner()
    require(!state.paused, "Contract is paused")
    require(account != #0, "Invalid address")

    put(state{total_supply = state.total_supply + value,
          map_balances[account] = balance_of(account) + value})

  public stateful function burn(value: int) =
    require(!state.paused, "Contract is paused")
    require(balance_of(Call.caller) >= value, "Burned amount is less than account balance")

    put(state{total_supply = state.total_supply - value,
          map_balances[Call.caller] = balance_of(Call.caller) - value})

  public stateful function pause() = 
    only_owner()
    put(state{paused = true})

  public stateful function unpause() = 
    only_owner()
    put(state{paused = false})

  private function require(expression : bool, error : string) =
    if(!expression) 
      abort(error)

  private function only_owner() =
      require(Call.caller == state.owner, "Only owner can mint!")
