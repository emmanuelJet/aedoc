contract NonFungibleFull =
  type token_id = int
  record state = { 
    name: string,
    symbol: string,
    owner: address,
    map_owned_tokens_count: map(address, int),
    map_token_owner: map(token_id, address),
    map_token_approvals: map(token_id, address),
    map_operator_approvals: map(address, map(address, bool)),
    map_token_uris: map(token_id, string)}

  public stateful function  init(name: string, symbol: string) = {
  	name = name,
  	symbol = symbol,
    owner = Call.caller,
  	map_owned_tokens_count = {},
  	map_token_owner = {},
  	map_token_approvals = {},
    map_operator_approvals = {},
    map_token_uris = {}}

  public function get_caller() : address =
    Call.caller

  public function name() : string =
    state.name

  public function symbol() : string =
    state.symbol

  public function balance_of(token_owner: address) : int =
    Map.lookup_default(token_owner, state.map_owned_tokens_count, 0)

  public function owner_of(token_id': token_id) : address =
    Map.lookup_default(token_id', state.map_token_owner, #0)

  public function get_approved(token_id': token_id) : address =
    Map.lookup_default(token_id', state.map_token_approvals, #0)

  public function is_approved_for_all(owner': address, operator: address) : bool =
    let map_operator_approvals' : map(address, bool) = Map.lookup_default(owner', state.map_operator_approvals, {})
    Map.lookup_default(operator, map_operator_approvals', false)

  public function get_token_uri(token_id': token_id) : string =
    Map.lookup_default(token_id', state.map_token_uris, "")

  public stateful function set_token_uri(token_id': token_id, uri: string) =
    only_token_owner(Call.caller, token_id')
    put(state{ map_token_uris[token_id'] = uri })

  public stateful function mint(token_id': token_id, to: address) = 
    only_owner(Call.caller)
    require(Map.lookup_default(token_id', state.map_token_owner, #0) == #0, "Token can't be overrided")

    put(state{ 
      map_token_owner[token_id'] = to,
      map_owned_tokens_count[to] = Map.lookup_default(to, state.map_owned_tokens_count, 0) + 1})

  public stateful function burn(token_id': token_id) = 
    only_token_owner(Call.caller, token_id') 
    remove_token_from(Call.caller, token_id')
    remove_token_metadata(token_id')

  public stateful function approve(token_id': int, to: address) =
    let owner': address = owner_of(token_id')
    
    require(to != Call.caller, "Receiver can't be same as sender")
    require(Call.caller == owner' || is_approved_for_all(owner', Call.caller), "Not owner or not approved")
    
    put(state{map_token_approvals[token_id'] = to})

  public stateful function transfer_from(from: address, to: address, token_id': token_id) =
    require(is_approved_or_owner(Call.caller, token_id'), "Not owner or not approved")
    
    clear_approval(from, token_id')
    remove_token_from(from, token_id')
    add_token_to(to, token_id')

  public stateful function set_approval_for_all(to: address, approved: bool) =
    put(state{map_operator_approvals[Call.caller = {}][to] = approved})

  private stateful function add_token_to(to: address, token_id': token_id) = 
    put(state{
      map_token_owner[token_id'] = to,
      map_owned_tokens_count[to] = Map.lookup_default(to, state.map_owned_tokens_count, 0) + 1})

  private stateful function remove_token_from(from: address, token_id': token_id) =
    only_token_owner(from, token_id')
    put(state{
      map_token_owner[token_id'] = #0,
      map_owned_tokens_count[from] = Map.lookup_default(from, state.map_owned_tokens_count, 0) - 1})

  private stateful function clear_approval(owner: address, token_id': token_id) =
    only_token_owner(owner, token_id')
    put(state{map_token_approvals = Map.delete(token_id', state.map_token_approvals)})

  private stateful function remove_token_metadata(token_id': token_id) = 
    put(state{map_token_uris = Map.delete(token_id', state.map_token_uris)})

  private function require(expression: bool, error: string) =
    if(!expression) 
      abort(error)

  private function only_owner(owner: address) =
    require(owner == state.owner, "Only owner can mint!")

  private function only_token_owner(owner: address, token_id': token_id) =
    require(owner == Map.lookup_default(token_id', state.map_token_owner, #0), "Only token owner can transfer!")

  private function is_approved_or_owner(spender: address, token_id': token_id) : bool = 
    let owner : address = owner_of(token_id')
    get_approved(token_id') == spender || owner == spender || is_approved_for_all(owner, spender)