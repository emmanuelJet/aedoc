contract Voting =
    public function vote : () => bool
    public function revoke : () => bool
    public function result : () => int

contract MultiSigWallet =
    record state = { 
        owner: address,
        configured: bool, 
        owners_count: int,
        transactions_count: int,
        required: int,
        map_index_owner: map(int, address),
        map_owner_index: map(address, int),
        map_index_transaction: map(int, transaction),
        map_remove_owner_votes: map(address, int),
        map_add_owner_votes: map(address, int),
        map_remove_owner_confirmations: map((address,address), bool),
        map_add_owner_confirmations: map((address,address), bool), 
        map_change_requirement_votes: map((int,address), bool),
        map_change_requirement_confirmations: map(int, int),
        map_tx_confirmations: map((int,address), bool)} 
    
    record transaction = { 
        id: int,
        confirmations: int,
        method: string}

    datatype method = 
        Vote |  
        Revoke | 
        Result
          
    public stateful function init() = 
        { required = 1,
          owner = Call.caller,
          configured = false,
          owners_count = 0,
          transactions_count = 0,
          map_index_owner = {},
          map_owner_index = {},
          map_index_transaction = {},
          map_remove_owner_votes = {},
          map_add_owner_votes = {},
          map_tx_confirmations = {},
          map_add_owner_confirmations = {},
          map_remove_owner_confirmations = {},
          map_change_requirement_votes = {},
          map_change_requirement_confirmations = {}}



    public stateful function init_owner(owner : address) = 
        only_owner()
        only_not_configured()

        add_new_owner(owner)

    public stateful function configure() = 
        only_owner()
        require(state.required =< state.owners_count, "'Required' should be lower than owners count!")

        put(state{configured = true})

    public stateful function vote_change_requirement(new_required: int, vote: bool) =
        only_owners()
        // validate requirements
        validate_requirement(new_required, state.owners_count)
        // is caller already voted
        require(!Map.lookup_default((new_required, Call.caller), state.map_change_requirement_votes, false), "Your vote has been already submitted.")

        put(state{map_change_requirement_votes[(new_required, Call.caller)] = true})

        if(vote)
            put(state{map_change_requirement_confirmations[new_required] =  Map.lookup_default(new_required, state.map_change_requirement_confirmations, 0) + 1})

        if(Map.lookup_default(new_required, state.map_change_requirement_confirmations, 0) >= state.required)
            put(state{map_change_requirement_confirmations[new_required] = 0})
            put(state{required = new_required})
            reset_requirement_vote(new_required, 1, state.owners_count)

    public stateful function vote_add_owner(owner : address) =
        only_configured()
        only_owners()
        is_not_owner(owner)
        has_voted_for_owner_addition(owner)
        
        put(state{map_add_owner_votes[owner] = Map.lookup_default(owner, state.map_add_owner_votes, 0) + 1})
        put(state{map_add_owner_confirmations[(owner,Call.caller)] = true}) // set this value to true because current owner make a vote 

        if(Map.lookup_default(owner, state.map_add_owner_votes, 0) >= state.required)
            add_new_owner(owner)
            
    public stateful function vote_remove_owner(owner: address) =
        only_configured()
        only_owners()
        is_owner_exists(owner)
        has_voted_for_owner_removal(owner)
        
        put(state{map_remove_owner_votes[owner] = Map.lookup_default(owner, state.map_remove_owner_votes, 0) + 1})
        put(state{map_remove_owner_confirmations[(owner,Call.caller)] = true})

        if(Map.lookup_default(owner, state.map_remove_owner_votes, 0) >= state.required)
            removeOwner(owner)

    public function get_confirmations(tx_id: int) : int =
        only_configured()

        state.map_index_transaction[tx_id].confirmations

    public stateful function add_transaction(method: string) : int = 
        only_configured()
        only_owners()
        require(validate_method_name(method), "Invalid method name.")

        let tx: transaction = {
            id = state.transactions_count,
            confirmations = 0,
            method = method}

        put(state{map_index_transaction = state.map_index_transaction{[state.transactions_count] = tx}})
        put(state{transactions_count = state.transactions_count + 1})  

        tx.id

    public stateful function approve(tx_id: int, voting_contract: Voting) =
        only_configured()
        only_owners()
        has_voted_tx_approved(tx_id)

        let needed_transaction: transaction = state.map_index_transaction[tx_id]

        let transaction' = needed_transaction { 
            id = needed_transaction.id, 
            confirmations = needed_transaction.confirmations + 1, 
            method = needed_transaction.method }

        put(state{map_tx_confirmations[(tx_id,Call.caller)] = true})
        put(state{map_index_transaction = state.map_index_transaction{[tx_id] = transaction'}})

        // if there are needed votes execute tx
        if(transaction'.confirmations >= state.required)
            execute_transaction(tx_id, voting_contract)

    private stateful function execute_transaction(tx_id: int, votingContract: Voting) = 
        only_configured()
        only_owners()
        valid_requirement()

        let transaction': transaction = state.map_index_transaction[tx_id]
        require(transaction'.confirmations >= state.required, "Not enough votes!")
        
        switch(transaction'.method)
            "Vote" => votingContract.vote()
            "Revoke" => votingContract.revoke()

        let tx = transaction' { 
            id = transaction'.id, 
            confirmations = 0, 
            method = transaction'.method }
    
        put(state{map_index_transaction = state.map_index_transaction{[tx_id] = tx}})

        reset_approve_tx_vote(tx_id, 1, state.owners_count)

    private function validate_method_name(method: string) : bool =
        switch(method)
            "Vote" => true
            "Revoke" => true
            _ => false

    private stateful function add_new_owner(owner : address) =
        require(owner != Contract.address, "Address can't be same as contract address")
          
        put(state{map_add_owner_votes[owner] = 0})
        put(state{owners_count = state.owners_count + 1})    
        put(state{map_index_owner = state.map_index_owner{[state.owners_count] = owner}})
        put(state{map_owner_index = state.map_owner_index{[owner] = state.owners_count}})

        reset_add_owner_vote(owner, 1, state.owners_count)

    private function only_owner() =
        require(Call.caller == state.owner, "Only owner")
        
    private function only_owners() =
        require(Map.lookup_default(Call.caller, state.map_owner_index, 0) != 0, "Caller is not an owner.")

    private function valid_requirement() =
        require(state.owners_count > 0, "Owners count should be greater than zero")
        require(state.owners_count =< state.required, "Owners count can't be greater than required")
        require(state.required > 0, "Required should be greater than zeo")

    private function only_not_configured() =
        require(!state.configured, "Only not configured")

    private function only_configured() =
        require(state.configured, "Only configured")

    private function require(expression : bool, error : string) =
        if(!expression) 
            abort(error)

    private function is_owner_exists(owner: address) =
        require(Map.lookup_default(owner, state.map_owner_index, 0) > 0, "Address is not an owner!")

    private function calculate_minimum_required(current_require) : int =
        switch(current_require =< 1)
            true => 1
            false => current_require - 1

    private function validate_requirement(required: int, owner_count: int) =
        require(required =< owner_count && required > 0 && owner_count > 0, "Invalid requirements.")

    private stateful function reset_requirement_vote(required: int, current_owner_index: int, max_index: int ) = 
        if(current_owner_index =< max_index)
            put(state{map_change_requirement_votes[(required, state.map_index_owner[current_owner_index])] = false})
            put(state{map_change_requirement_votes = Map.delete((required, state.map_index_owner[current_owner_index]), state.map_change_requirement_votes)})
            reset_requirement_vote(required, current_owner_index + 1, max_index)

    private stateful function reset_add_owner_vote(owner': address, current_owner_index: int, max_index : int) = 
        if(current_owner_index =< max_index)
            put(state{map_add_owner_confirmations[(owner', state.map_index_owner[current_owner_index])] = false})
            put(state{map_add_owner_confirmations = Map.delete((owner', state.map_index_owner[current_owner_index]), state.map_add_owner_confirmations)})
            reset_add_owner_vote(owner', current_owner_index + 1, max_index)

    private stateful function reset_remove_owner_vote(owner': address, current_owner_index: int, max_index: int) = 
        if(current_owner_index =< max_index)
            put(state{map_remove_owner_confirmations[(owner', state.map_index_owner[current_owner_index])] = false})
            put(state{map_remove_owner_confirmations = Map.delete((owner', state.map_index_owner[current_owner_index]), state.map_remove_owner_confirmations)})
            reset_remove_owner_vote(owner', current_owner_index + 1, max_index)

    private stateful function reset_approve_tx_vote(tx_id: int, current_owner_index: int, max_index: int ) = 
        if(current_owner_index =< max_index)
            put(state{map_tx_confirmations[(tx_id, state.map_index_owner[current_owner_index])] = false})
            put(state{map_tx_confirmations = Map.delete((tx_id, state.map_index_owner[current_owner_index]), state.map_tx_confirmations)})
            reset_approve_tx_vote(tx_id, current_owner_index + 1, max_index)

    private function is_not_owner(new_owner: address) =
        require(Map.lookup_default(new_owner, state.map_owner_index, 0) == 0, "Suggested owner is already owner!")

    private function has_voted_for_owner_addition(new_owner : address) =
        require(!Map.lookup_default((new_owner, Call.caller), state.map_add_owner_confirmations, false), "Your vote has been already submitted.")
        

    private function has_voted_for_owner_removal(owner: address) =
        require(!Map.lookup_default((owner, Call.caller), state.map_remove_owner_confirmations, false), "Your vote has been already submitted.")

    private function has_enough_remove_votes(owner: address) =
        require(Map.lookup_default(owner, state.map_remove_owner_votes, 0) >= state.required, "Not enough votes!")

    private stateful function removeOwner(owner: address) =
        only_configured()
        only_owners()
        has_enough_remove_votes(owner)

        // swap last owner with deleted one
        let owner_index = state.map_owner_index[owner]
        let last_added_owner = state.map_index_owner[state.owners_count]
        put(state{map_owner_index[last_added_owner] = owner_index})
        put(state{map_index_owner[owner_index] = last_added_owner})

        put(state{map_owner_index[owner] = 0}) 
        put(state{map_remove_owner_votes[owner] = 0})
        put(state{map_remove_owner_votes = Map.delete(owner, state.map_remove_owner_votes)})
        put(state{map_owner_index = Map.delete(owner, state.map_owner_index)})
        put(state{owners_count = state.owners_count - 1})    
        put(state{required = calculate_minimum_required(state.required)})

        reset_remove_owner_vote(owner, 1, state.owners_count)

    private function has_voted_tx_approved(tx_id: int) =
        require(!Map.lookup_default((tx_id, Call.caller), state.map_tx_confirmations, false), "Your vote has been already submitted.")
