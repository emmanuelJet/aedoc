contract ERC20Token =
  record state = {
    totalSupply : int,
    decimals : int,
    name : string,
    symbol : string,
    balances : map(address, int),
    allowed : map(address, map(address,int)),
    // Logs, remove when native Events are there
    transfer_log : list((address,address,int)),
    approval_log : list((address,address,int))}

  // init(100000000, 10, "Token Name", "TKN")
  entrypoint init(_totalSupply : int, _decimals : int, _name : string, _symbol : string ) = {
    totalSupply = _totalSupply,
    decimals = _decimals,
    name = _name,
    symbol = _symbol,
    balances = {[Call.caller] = _totalSupply }, // creator gets all Tokens
    allowed = {},
    // Logs, remove when native Events are there
    transfer_log = [],
    approval_log = []}

  stateful entrypoint totalSupply() : int = state.totalSupply
  stateful entrypoint decimals() : int = state.decimals
  stateful entrypoint name() : string = state.name
  stateful entrypoint symbol() : string = state.symbol

  stateful entrypoint balanceOf(tokenOwner : address ) : int =
    Map.lookup_default(tokenOwner, state.balances, 0)

  stateful entrypoint transfer(to : address, tokens : int) =
    put( state{balances[Call.caller] = sub(state.balances[Call.caller], tokens) })
    put( state{balances[to] = add(Map.lookup_default(to, state.balances, 0), tokens) })
    transferEvent(Call.caller, to, tokens)
    true

  stateful entrypoint approve(spender : address, tokens : int) =
    // allowed[Call.caller] field must have a value!
    ensure_allowed(Call.caller)
    put( state{allowed[Call.caller][spender] = tokens} )
    approvalEvent(Call.caller, spender, tokens)
    true

  stateful entrypoint transferFrom(from : address, to : address, tokens : int) =
    put( state{ balances[from] = sub(state.balances[from], tokens) })
    put( state{ allowed[from][Call.caller] = sub(state.allowed[from][Call.caller], tokens) })
    put( state{ balances[to] = add(balanceOf(to), tokens) })
    transferEvent(from, to, tokens)
    true

  entrypoint allowance(_owner : address, _spender : address) : int =
    state.allowed[_owner][_spender]

  stateful entrypoint getTransferLog() : list((address,address,int)) =
    state.transfer_log
  stateful entrypoint getApprovalLog() : list((address,address,int)) =
    state.approval_log

  //
  // Private Functions
  //

  stateful function ensure_allowed(key : address) =
    switch(Map.lookup(key, state.allowed))
      None => put(state{allowed[key] = {}})
      Some(_) => ()

  stateful function transferEvent(from : address, to : address, tokens : int) =
    let e = (from, to, tokens)
    put( state{transfer_log = e :: state.transfer_log })
    e

  stateful function approvalEvent(from : address, to : address, tokens : int) =
    let e = (from, to, tokens)
    put( state{approval_log = e :: state.approval_log })
    e

  function sub(_a : int, _b : int) : int =
    require(_b =< _a, "Error")
    _a - _b

  function add(_a : int, _b : int) : int =
    let c : int = _a + _b
    require(c >= _a, "Error")
    c
