contract ExampleContract =

  record person = {
    name: string,
    age: int}

  record state = {
    current_id: int,
    m_id_people: map(int, person),
    m_human: map(int,int),
    l_humans: list(int)}

  datatype event = TestEvent()

  datatype event = TestEvent()

  stateful entrypoint init() =
    { current_id = 0,
      m_id_people = {},
      m_human = {},
      l_humans = []}

  entrypoint say_hello(name : string) : string = 
    String.concat("Hello ", name)

  entrypoint sum(intA: int, intB: int) : int =
    intA + intB

  entrypoint am_i_caller(caller: address) : bool =
    caller == Call.caller

  entrypoint get_caller() : address =
    Call.caller

  entrypoint return_string() : string =
    "Call.caller"

  function multiply(x: int, y: int) : int =
    x * y

  function prv_func(name: string) =
    String.concat("Bye ", name)

  entrypoint show_my_param(param: bool) : bool =
    param

  stateful entrypoint add_person(_name: string, _age: int) : int =

    let _person : person = {
      name = _name,
      age = _age}

    let next_id = state.current_id + 1

    put(state{m_id_people[next_id] = _person})
    put(state{current_id = next_id})

    next_id

  entrypoint func_no_return(intA: int, intB: int) =
    Chain.event(TestEvent)

  stateful entrypoint add_human(human: map(int, int)) : map(int,int) =
    put(state{m_human = human})
    state.m_human
    
  stateful entrypoint add_record(human:person, id: int): person =
    put(state{m_id_people[id] = human})
    state.m_id_people[id]
    
  stateful entrypoint add_list_human(humansList: list(int)): list(int) =
    put(state{l_humans = humansList})
    state.l_humans

  entrypoint get_person_by_id(id: int) : person =
    _get_person_by_id(id)
  
  function _get_person_by_id(id: int) : person =
      
    let _person : person = {
      name = "",
      age = 0}

    switch(Map.lookup(id, state.m_id_people))
      Some(x) => x
      None => _person

  // this code is needed for a test
  //  entrypoint commented_function() : list(string) =
  //   // ["Name: first todo | Is completed: false", "Name: second todo | Is completed: true"]
  //   let numberOfTodos = get_todo_count(Call.caller)
  //   let collection = []
  //   let allTodos = collectData(Call.caller, collection, 0, numberOfTodos)
  //   allTodos